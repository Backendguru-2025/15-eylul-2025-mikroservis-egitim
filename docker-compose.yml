services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "9080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  config-server:
    build: ./config-server # Path to Dockerfile context
    ports:
      - "8888:8888"
    volumes:
      - ./config-server/config-repo:/etc/config-repo # Mount your local config-repo
      # Ensure Config Server's search-locations points to /etc/config-repo
    environment:
      # If config server's search-locations is parameterized or needs env var
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:///etc/config-repo
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8888/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      mysql-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  eureka-server:
    build: ./eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M

  eureka-client:
     build: ./eureka-client
     depends_on:
       eureka-server:
        condition: service_healthy
     deploy:
       resources:
         limits:
           memory: 256M

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  zipkin-server:
    image: openzipkin/zipkin:3.4
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:9411/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M

  product-service:
    build: ./product-service
#    ports:
#      - "8080:8080"
    depends_on:
      mysql-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  order-service:
    build: ./order-service
 #   environment:
 #     - LOGSTASH_HOST=logstash
 #     - LOGSTASH_PORT=5000
    ports:
      - "8090:8080"
    depends_on:
      mysql-db:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      #      logstash:
      #        condition: service_healthy
  #    zipkin-server:
  #      condition: service_healthy
    #      keycloak:
    #        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M

  mysql-db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=cokgizlisifre
      - MYSQL_DATABASE=default_db
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-pcokgizlisifre" ]
      timeout: 20s
      retries: 10


volumes:
  mysql_data:
  prometheus_data:
  grafana_data:

